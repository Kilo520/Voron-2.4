# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html
#[gcode_macro G10]
#gcode:
#    G91
#    G1 E-2.5 F4000
#    G90

#[gcode_macro G11]
#gcode:
#    G91
#    G1 E2.5 F1200
#    G90


#[gcode_macro M600]
#gcode:
#      SET_GCODE_VARIABLE MACRO=CHANGE_FILAMENT VARIABLE=enabled VALUE=1
#      {% if printer.idle_timeout.state == 'Printing' %}
#      CHANGE_FILAMENT
#      {% else %}
#      {printer.gcode.action_respond_info("action:pause")}
#      {% endif %}

[gcode_macro CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        
    {% endif %}

[gcode_macro CHANGE_FILAMENT]
variable_enabled: 0
gcode:
      {% if printer["gcode_macro CHANGE_FILAMENT"].enabled %}
      PAUSE_MACRO
      UNLOAD_FILAMENT
      {% endif %}
      SET_GCODE_VARIABLE MACRO=CHANGE_FILAMENT VARIABLE=enabled VALUE=0

[gcode_macro PAUSE_MACRO]
gcode:
      PAUSE
      #PARK_MACRO
      #SET_IDLE_TIMEOUT TIMEOUT=7200 #should turn off motors after a specific time limit

[gcode_macro PURGE]
gcode:
      M117 PURGING..
      G91
      G1 E50 F250
      G90

[gcode_macro LOAD_FILAMENT]
gcode:
      M117 LOADING...
      G91 #relative
      G1 E99.9 F2000 #extrude 100mm
      G1 E435 F2500
      G4 P900
      G1 E45.0 F250
      G90 #absolute

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(500) %}
    G91
    G1 E-50 F{speed}
    G1 E-50 F{speed}
    G92 E0

[gcode_macro RESUME_MACRO]
gcode:
      M117 RESUMING...
      RESUME

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.



[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-100 F1000
    RESTORE_GCODE_STATE NAME=M600_state
    
#[gcode_macro outoffilament]
#gcode:
#        {% if pause_position.x is not none %}
#        # relative XYZE
#       G91
#        M83
#
#        # retract filament of 0.8 mm up, move Z slightly upwards and 
#       G1 Z+5 E-0.8 F4500
#
#        # absolute XYZE
#        M82
#       G90
#
#        # move to a safe rest position, adjust as necessary
#        G1 X0 Y0
#        {% endif %}

#[gcode_macro not_outoffilament]
#gcode:
#        {% if pause_position.x is not none %}
#        # relative extruder
#        M83
#
#        # prime nozzle
#        G1 E-0.8 F4500
#        G1 E0.8 F4500
#        G1 E0.8 F4500
#
#        # absolute E
#        M82
#
#        # absolute XYZ
#        G90
#
#        # reset E
#        G92 E{ pause_position.e }
#
#        # WARNING!!! - use M83 or M82(exruder absolute mode) according what your slicer generates
#        M82 # extruder relative mode
#        # move back to pause position XYZ
#        G1 X{ pause_position.x } Y{ pause_position.y } Z{ pause_position.z } F4500
#
#        # reset to feed rate before pause if available
#        {% if pause_position.f is not none %}G1 F{ pause_position.f }{% endif %}
#        {% endif %}
		


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(30)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED